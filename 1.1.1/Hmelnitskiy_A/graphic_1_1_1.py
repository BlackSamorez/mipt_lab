# -*- coding: utf-8 -*-
"""graphic_1.1.1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lLjo3AKGOljv__EV9Vg2HIieCWT3U5bw
"""

import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import numpy as np
import matplotlib as mpl
from math import *

plt.figure(figsize=(10,10))
plt.title(r"Зависимость $V_{a}(I_{a})$ напряжения от тока")
plt.ylabel("V, мВ")
plt.xlabel("I, мА")

x1 = []
y1 = []
x2 = []
y2 = []
x3 = []
y3 = []

file = open('V(I).1.txt', 'r')
for i in range(10):
    line = file.readline()
    x1.append(float(line.split()[0]))
    y1.append(float(line.split()[1]))

file = open('V(I).2.txt', 'r')
for i in range(10):
    line = file.readline()
    x2.append(float(line.split()[0]))
    y2.append(float(line.split()[1]))

file = open('V(I).3.txt', 'r')
for i in range(10):
    line = file.readline()
    x3.append(float(line.split()[0]))
    y3.append(float(line.split()[1]))

sr_quad_x1 = 0
sr_quad_x2 = 0
sr_quad_x3 = 0
sr_quad_y1 = 0
sr_quad_y2 = 0
sr_quad_y3 = 0

for i in range(10):
  sr_quad_x1 += x1[i]**2
  sr_quad_x2 += x2[i]**2
  sr_quad_x3 += x3[i]**2
  sr_quad_y1 += y1[i]**2
  sr_quad_y2 += y2[i]**2
  sr_quad_y3 += y3[i]**2

x1.sort()
y1.sort()
x1 = np.array(x1)
y1 = np.array(y1)
x2.sort()
y2.sort()
x2 = np.array(x2)
y2 = np.array(y2)
x3.sort()
y3.sort()
x3 = np.array(x3)
y3 = np.array(y3)

reg1 = LinearRegression(fit_intercept = False).fit(x1.reshape(10,1),y1)
sigma1 = sqrt(((sr_quad_y1 / 9)/(sr_quad_x1 / 9)- reg1.coef_[0]**2)/(9))
plt.plot(x1.reshape(10,1),y1,'r^', label='Измерения при l = 20 см')
plt.plot(x1, reg1.predict(x1.reshape(10,1)),'m',label= f"Аппроксимирующая прямая k = {reg1.coef_[0]:.3f} $\pm$ {sigma1:.4f} Ом для l = 20 см")

reg2 = LinearRegression(fit_intercept = False).fit(x2.reshape(10,1),y2)
sigma2 = sqrt(((sr_quad_y2 / 9)/(sr_quad_x2 / 9)- reg2.coef_[0]**2)/(9))
plt.plot(x2.reshape(10,1),y2,'g^', label='Измерения при l = 30 см')
plt.plot(x2, reg2.predict(x2.reshape(10,1)),'k',label= f"Аппроксимирующая прямая k = {reg2.coef_[0]:.3f} $\pm$ {sigma2:.4f} Ом для l = 30 см")

reg3 = LinearRegression(fit_intercept = False).fit(x3.reshape(10,1),y3)
sigma3 = sqrt(((sr_quad_y3 / 9)/(sr_quad_x3 / 9)- reg3.coef_[0]**2)/(9))
plt.plot(x3.reshape(10,1),y3,'b^', label='Измерения при l = 50 см')
plt.plot(x3, reg3.predict(x3.reshape(10,1)),'c',label=f"Аппроксимирующая прямая k = {reg3.coef_[0]:.3f} $\pm$ {sigma3:.4f} Ом для l = 50 см")

plt.grid(visible = True, which='major', axis='both', alpha=1)
plt.grid(visible = True, which='minor', axis='both', alpha=1)

plt.legend()
plt.show()
plt.savefig('graphic.png')
file.close()